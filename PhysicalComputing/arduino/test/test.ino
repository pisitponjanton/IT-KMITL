#include <WiFiS3.h>
#include <MQTTClient.h>
#include <Arduino.h>

// ------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å -------------------
WiFiClient net;
MQTTClient client(256);

String currentSubTopic = "";
String lastReceivedTopic = "";
String lastReceivedPayload = "";

// ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô web
float web = 0;

unsigned long lastMillis = 0;
int n = 0;

int led = 3;
int pin = A0;
int trigPin = 9;
int echoPin = 10;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç (0‚Äì9)
int num_array[10][7] = {
  { 1, 1, 1, 1, 1, 1, 0 },  // 0
  { 0, 1, 1, 0, 0, 0, 0 },  // 1
  { 1, 1, 0, 1, 1, 0, 1 },  // 2
  { 1, 1, 1, 1, 0, 0, 1 },  // 3
  { 0, 1, 1, 0, 0, 1, 1 },  // 4
  { 1, 0, 1, 1, 0, 1, 1 },  // 5
  { 1, 0, 1, 1, 1, 1, 1 },  // 6
  { 1, 1, 1, 0, 0, 0, 0 },  // 7
  { 1, 1, 1, 1, 1, 1, 1 },  // 8
  { 1, 1, 1, 0, 0, 1, 1 }   // 9
};

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi -------------------
void connectToWiFi(const char* ssid = "iPhoner", const char* password = "top44444") {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ -------------------
void onMessageReceived(String& topic, String& payload) {
  lastReceivedTopic = topic;
  lastReceivedPayload = payload;

  if (topic == currentSubTopic) {
    if (payload == "on") {
      digitalWrite(LED_BUILTIN, HIGH);
    } else if (payload == "off") {
      digitalWrite(LED_BUILTIN, LOW);
    }
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT -------------------
void connectToMQTT(const char* broker = "phycom.it.kmitl.ac.th",
                   int port = 1883,
                   const char* clientID = "ArduinoClient67070119",
                   const char* subTopic = "67070119/venus") {
  client.begin(broker, port, net);
  client.onMessage(onMessageReceived);

  while (!client.connect(clientID)) {
    delay(1000);
  }

  client.subscribe(subTopic);
  currentSubTopic = subTopic;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ MQTT -------------------
void publishToMQTT(const char* topic, const String& value) {
  client.publish(topic, value);
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å MQTT -------------------
String getMQTTMessage() {
  return lastReceivedPayload;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ topic ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -------------------
String getMQTTTopic() {
  return lastReceivedTopic;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ -------------------
float readTemperature(int pin = pin) {
  int sensorValue = analogRead(pin);             // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡∏≤ A0
  float voltage = sensorValue * (5.0 / 1023.0);  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (‡πÇ‡∏ß‡∏•‡∏ï‡πå)
  float temperatureC = (voltage - 0.5) * 100.0;  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)
  return temperatureC;                           // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Thermistor (NTC ‡πÅ‡∏ö‡∏ö 10k)
float readThermistor(int pin = pin) {
  // ==== ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡∏á‡∏à‡∏£‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ====
  const float VCC = 5;                 // ‚ö° ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ UNO (5V) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 5.0
  const float R_FIXED = 10000.0;       // ‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (10kŒ©)
  const float B_COEFFICIENT = 3380.0;  // üß© ‡∏Ñ‡πà‡∏≤ Beta (‡∏•‡∏≠‡∏á 3950, 3435, 3380)
  const float R0 = 10000.0;            // ‚Ñ¶ ‡∏Ç‡∏≠‡∏á thermistor ‡∏ó‡∏µ‡πà 25¬∞C
  const float T0 = 25.0 + 273.15;      // 25¬∞C ‚Üí 298.15 K

  // ==== ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ ADC ====
  int adcValue = analogRead(pin);
  if (adcValue <= 0) return -100.0;

  // ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô ====
  float Vout = (adcValue * VCC) / 1023.0;
  if (Vout <= 0 || Vout >= VCC) return -100.0;
  float R_thermistor = (Vout * R_FIXED) / (VCC - Vout);

  // ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ====
  float tempK = 1.0 / ((1.0 / T0) + (1.0 / B_COEFFICIENT) * log(R_thermistor / R0));
  return tempK - 273.15;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic Sensor (HC-SR04)
float readUltrasonic(int trigPin = trigPin, int echoPin = echoPin) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏•‡∏™‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ 10 ¬µs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö (microseconds)
  long duration = pulseIn(echoPin, HIGH, 30000);  // timeout 30ms (‚âà5m)

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
  float distanceCm = duration * 0.034 / 2.0;

  return distanceCm;  // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (cm)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á LED ‡∏î‡πâ‡∏ß‡∏¢ Potentiometer
int controlLEDWithPot(int pin = pin, int potPin = led) {
  delay(10);
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å potentiometer (0‚Äì1023)
  int potValue = analogRead(pin);

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á 0‚Äì255 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PWM
  int brightness = potValue / 4;  // (1023 √∑ 4 ‚âà 255)

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ PWM ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤ LED
  analogWrite(potPin, brightness);
  return potValue;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô 7-segment -------------------
void display7Segment(int digit, int pins[7]) {
  if (digit < 0 || digit > 9) return;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ HIGH/LOW ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏≤ segment
  for (int i = 0; i < 7; i++) {
    digitalWrite(pins[i], num_array[digit][i]);
  }
}

int segmentPins[8] = { 2, 3, 4, 5, 6, 7, 8, 9 };  // a,b,c,d,e,f,g,‡∏à‡∏∏‡∏î

// ------------------- Setup -------------------
void setup() {
  Serial.begin(9600);

  pinMode(led, OUTPUT);  //3

  pinMode(pin, OUTPUT);  //A0

  pinMode(trigPin, OUTPUT);  //9
  pinMode(echoPin, INPUT);   //10

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô 7-segment ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  for (int i = 0; i < 8; i++) {
    pinMode(segmentPins[i], OUTPUT);
  };

  connectToWiFi();
  connectToMQTT();
}

// ------------------- Loop -------------------
void loop() {
  client.loop();

  if (!client.connected()) {
    connectToMQTT();
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
  if (millis() - lastMillis > 1000) {
    lastMillis = millis();
    publishToMQTT("67070119/temp", String(web));
  }

  String msg = getMQTTMessage();
  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
  // float tem = readTemperature(); pin->A0

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Thermistor (NTC ‡πÅ‡∏ö‡∏ö 10k) pin->A0
  // float tem = readThermistor();

  // // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic Sensor trigPin->9 , echoPin->10
  // float tem = readUltrasonic();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á LED ‡∏î‡πâ‡∏ß‡∏¢ Potentiometer pin->A0, potPin->3(‡∏ï‡πà‡∏≠‡πÑ‡∏ü LED)
  // float tem = controlLEDWithPot();

  for (int d = 0; d < 10; d++) {
    display7Segment(d, segmentPins);
    delay(1000);
  }
  // Serial.println(tem);
  // web = tem;
}
