#include <WiFiS3.h>
#include <MQTTClient.h>
#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// ------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å -------------------
WiFiClient net;
MQTTClient client(256);

String currentSubTopic = "";
String lastReceivedTopic = "";
String lastReceivedPayload = "";

// ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô web
float web = 0;

unsigned long lastMillis = 0;
int n = 0;

int red = 11;
int blue = 12;
int green = 13;

int button = 2;

int led = 3;
int pin = A0;
int trigPin = 9;
int echoPin = 10;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç (0‚Äì9)
int num_array[10][7] = {
  { 1, 1, 1, 1, 1, 1, 0 },  // 0
  { 0, 1, 1, 0, 0, 0, 0 },  // 1
  { 1, 1, 0, 1, 1, 0, 1 },  // 2
  { 1, 1, 1, 1, 0, 0, 1 },  // 3
  { 0, 1, 1, 0, 0, 1, 1 },  // 4
  { 1, 0, 1, 1, 0, 1, 1 },  // 5
  { 1, 0, 1, 1, 1, 1, 1 },  // 6
  { 1, 1, 1, 0, 0, 0, 0 },  // 7
  { 1, 1, 1, 1, 1, 1, 1 },  // 8
  { 1, 1, 1, 0, 0, 1, 1 }   // 9
};

// Custom Font ‡∏£‡∏π‡∏õ‡∏´‡∏±‡∏ß‡πÉ‡∏à ‚ô•
byte heart[8] = {
  0b00000,
  0b01010,
  0b11111,
  0b11111,
  0b01110,
  0b00100,
  0b00000,
  0b00000
};

// Custom Font ‡∏≠‡∏á‡∏®‡∏≤ ¬∞
byte degreeSymbol[8] = {
  0b00111,
  0b00101,
  0b00111,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi -------------------
void connectToWiFi(const char* ssid = "iPhoner", const char* password = "top44444") {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ -------------------
void onMessageReceived(String& topic, String& payload) {
  lastReceivedTopic = topic;
  lastReceivedPayload = payload;

  if (topic == currentSubTopic) {
    if (payload == "on") {
      digitalWrite(LED_BUILTIN, HIGH);
    } else if (payload == "off") {
      digitalWrite(LED_BUILTIN, LOW);
    }
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT -------------------
void connectToMQTT(const char* broker = "phycom.it.kmitl.ac.th",
                   int port = 1883,
                   const char* clientID = "ArduinoClient67070119",
                   const char* subTopic = "67070119/venus") {
  client.begin(broker, port, net);
  client.onMessage(onMessageReceived);

  while (!client.connect(clientID)) {
    delay(1000);
  }

  client.subscribe(subTopic);
  currentSubTopic = subTopic;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ MQTT -------------------
void publishToMQTT(const char* topic, const String& value) {
  if (millis() - lastMillis > 500) {
    lastMillis = millis();
    client.publish(topic, value);
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å MQTT -------------------
String getMQTTMessage() {
  return lastReceivedPayload;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ topic ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -------------------
String getMQTTTopic() {
  return lastReceivedTopic;
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô F, K, R,-------------------
float convertTemperature(float celsius, char unit) {
  switch (unit) {
    case 'F': return (celsius * 9.0 / 5.0) + 32.0;    // Fahrenheit
    case 'K': return celsius + 273.15;                // Kelvin
    case 'R': return (celsius + 273.15) * 9.0 / 5.0;  // Rankine
    case 'E': return celsius * 4.0 / 5.0;             // Reaumur
    default: return celsius;                          // Celsius
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ -------------------
float readTemperature(int pin = pin) {
  int sensorValue = analogRead(pin);             // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡∏≤ A0
  float voltage = sensorValue * (5.0 / 1023.0);  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (‡πÇ‡∏ß‡∏•‡∏ï‡πå)
  float temperatureC = (voltage - 0.5) * 100.0;  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)
  return temperatureC;                           // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Thermistor (NTC ‡πÅ‡∏ö‡∏ö 10k)
float readThermistor(int pin = pin) {
  // ==== ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡∏á‡∏à‡∏£‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ ====
  const float VCC = 5;                 // ‚ö° ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ UNO (5V) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 5.0
  const float R_FIXED = 10000.0;       // ‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (10kŒ©)
  const float B_COEFFICIENT = 3380.0;  // üß© ‡∏Ñ‡πà‡∏≤ Beta (‡∏•‡∏≠‡∏á 3950, 3435, 3380)
  const float R0 = 10000.0;            // ‚Ñ¶ ‡∏Ç‡∏≠‡∏á thermistor ‡∏ó‡∏µ‡πà 25¬∞C
  const float T0 = 25.0 + 273.15;      // 25¬∞C ‚Üí 298.15 K

  // ==== ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ ADC ====
  int adcValue = analogRead(pin);
  if (adcValue <= 0) return -100.0;

  // ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô ====
  float Vout = (adcValue * VCC) / 1023.0;
  if (Vout <= 0 || Vout >= VCC) return -100.0;
  float R_thermistor = (Vout * R_FIXED) / (VCC - Vout);

  // ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C) ====
  float tempK = 1.0 / ((1.0 / T0) + (1.0 / B_COEFFICIENT) * log(R_thermistor / R0));
  return tempK - 273.15;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic Sensor (HC-SR04)
float readUltrasonic(int trigPin = trigPin, int echoPin = echoPin) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏•‡∏™‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ 10 ¬µs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö (microseconds)
  long duration = pulseIn(echoPin, HIGH, 30000);  // timeout 30ms (‚âà5m)

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
  float distanceCm = duration * 0.034 / 2.0;

  return distanceCm;  // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (cm)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á LED ‡∏î‡πâ‡∏ß‡∏¢ Potentiometer
int controlLEDWithPot(int pin = pin, int potPin = led) {
  delay(10);
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å potentiometer (0‚Äì1023)
  int potValue = analogRead(pin);

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á 0‚Äì255 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PWM
  int brightness = potValue / 4;  // (1023 √∑ 4 ‚âà 255)

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ PWM ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤ LED
  analogWrite(potPin, brightness);
  return potValue;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∏‡∏°‡∏™‡∏µ LED  RGB Common Anode ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡πà‡∏≤‡πÅ‡∏Ñ‡πà 0 -> LOW ‡πÅ‡∏•‡∏∞ 1 -> HIGH
void setColorRGB(int r, int g, int b) {
  // red	setColorRGB(1,0,0);
  // green	setColorRGB(0,1,0);
  // blue	setColorRGB(0,0,1);
  // yellow	setColorRGB(1,1,0);
  // magenta	setColorRGB(1,0,1);
  // cyan	setColorRGB(0,1,1);
  // white	setColorRGB(1,1,1);
  // ‡∏õ‡∏¥‡∏î	setColorRGB(0,0,0);

  digitalWrite(red, r ? LOW : HIGH);  // Common Anode ‚Üí LOW = ‡∏ï‡∏¥‡∏î
  digitalWrite(green, g ? LOW : HIGH);
  digitalWrite(blue, b ? LOW : HIGH);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏° ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ set
int readButton(int pin = button) {
  static unsigned long lastPress = 0;
  const unsigned long debounceDelay = 50;  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏î‡πâ‡∏á 50ms

  int state = digitalRead(pin);

  // ‡πÉ‡∏ä‡πâ INPUT_PULLUP ‚Üí ‡∏õ‡∏Å‡∏ï‡∏¥ HIGH, ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß LOW
  if (state == LOW && millis() - lastPress > debounceDelay) {
    lastPress = millis();
    return 1;  // ‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  }
  return 0;  // ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏î
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô 7-segment -------------------
void display7Segment(int digit, int pins[7]) {
  if (digit < 0 || digit > 9) return;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ HIGH/LOW ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏≤ segment
  for (int i = 0; i < 7; i++) {
    digitalWrite(pins[i], num_array[digit][i]);
  }
}

// ------------------- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î LCD -------------------
LiquidCrystal_I2C lcd(0x27, 16, 2);
// üìå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0x3F (‡∏ö‡∏≤‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏ä‡πâ address ‡∏ô‡∏µ‡πâ)

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -------------------
void printLCD(String text, int col = 0, int row = 0) {
  lcd.setCursor(col, row);  // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå, ‡πÅ‡∏ñ‡∏ß)
  lcd.print(text);          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç -------------------
void printLCDint(float text, int col = 0, int row = 0) {
  lcd.setCursor(col, row);  // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå, ‡πÅ‡∏ñ‡∏ß)
  lcd.print(text, 2);       // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam Subscribe ‡∏Ç‡πâ‡∏≠ 1-------------------
void mockExamSubscribe_1(int value) {
  int red_led = red;
  int blue_led = blue;
  int green_led = green;
  digitalWrite(red_led, LOW);
  digitalWrite(blue_led, LOW);
  digitalWrite(green_led, LOW);

  Serial.println(value);

  if (value >= 10 && value <= 25) {
    digitalWrite(green_led, HIGH);
  } else if (value >= 26 && value <= 35) {
    digitalWrite(blue_led, HIGH);
  } else if (value >= 36 && value <= 50) {
    digitalWrite(red_led, HIGH);
  }
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Sensor ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ -------------------
void mockExamPublish_1() {
  float tem = readTemperature();
  publishToMQTT("67070119/temp", String(tem));
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ (0-1023)-------------------
void mockExamPublish_2() {
  float tem = controlLEDWithPot();
  publishToMQTT("67070119/light", String(tem));
}

// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô cm-------------------
void mockExamPublish_3() {
  float tem = readUltrasonic();
  if (tem > 20) {
    publishToMQTT("67070119/food", "off");
  }
  Serial.println(tem);
}

int segmentPins[8] = { 2, 3, 4, 5, 6, 7, 8, 9 };  // a,b,c,d,e,f,g,‡∏à‡∏∏‡∏î

// ------------------- Setup -------------------
void setup() {
  Serial.begin(9600);

  pinMode(led, OUTPUT);  //3

  pinMode(red, OUTPUT);    //11
  pinMode(blue, OUTPUT);   //12
  pinMode(green, OUTPUT);  //13

  pinMode(pin, OUTPUT);  //A0

  pinMode(trigPin, OUTPUT);  //9
  pinMode(echoPin, INPUT);   //10

  pinMode(button, INPUT_PULLUP);  //2

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô 7-segment ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô OUTPUT
  for (int i = 0; i < 8; i++) {
    pinMode(segmentPins[i], OUTPUT);
  };

  // set LCD
  // lcd.init();       // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LCD
  // lcd.backlight();  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  // lcd.clear();      // ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  // lcd.createChar(0, heart);
  // lcd.createChar(1, degreeSymbol);
  // printLCD("Hello LCD!", 0, 0);
  // printLCD("Arduino Ready", 0, 1);

  connectToWiFi();
  connectToMQTT();
}

// ------------------- Loop -------------------
void loop() {
  client.loop();

  if (!client.connected()) {
    //‡∏ï‡πà‡∏≠ wifi
    connectToMQTT();
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
  //   publishToMQTT("67070119/temp", String(web));

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å web dataType ‡πÄ‡∏õ‡πá‡∏ô String
  String msg = getMQTTMessage();


  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam Subscribe ‡∏Ç‡πâ‡∏≠ 1
  // mockExamSubscribe_1(msg.toInt());

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Sensor ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
  mockExamPublish_1();

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ (0-1023)
  // mockExamPublish_2();

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå Mock Exam ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô cm
  // mockExamPublish_3();

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
  // float tem = readTemperature(); pin->A0

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Thermistor (NTC ‡πÅ‡∏ö‡∏ö 10k) pin->A0
  // float tem = readThermistor();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ C -> F, K, R, E
  // float tem_covert convertTemperature(tem, 'F');


  // // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ultrasonic Sensor trigPin->9 , echoPin->10
  // float tem = readUltrasonic();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á LED ‡∏î‡πâ‡∏ß‡∏¢ Potentiometer pin -> A0, potPin -> 3(‡∏ï‡πà‡∏≠‡πÑ‡∏ü LED)
  // float tem = controlLEDWithPot();

  // loop ‡πÄ‡∏•‡∏Ç 1 - 10
  // for (int d = 0; d < 10; d++) {
  // // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô 7-segment d->‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á segmentPing -> ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏≤
  //   display7Segment(d, segmentPins);
  //   delay(1000);
  // }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∏‡∏°‡∏™‡∏µ LED  RGB Common Anode ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡πà‡∏≤‡πÅ‡∏Ñ‡πà 0 -> LOW ‡πÅ‡∏•‡∏∞ 1 -> HIGH
  // setColorRGB(1, 0, 1);

  // readButton ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏•‡∏á‡πÑ‡∏õ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö 3 ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏™‡∏≤‡∏°‡∏•‡∏á‡πÑ‡∏õ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á 2
  // if (readButton()) {
  //   // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏ü‡∏ä‡πà‡∏≠‡∏á 11 ‡∏à‡∏∞‡∏ï‡∏¥‡∏î
  //   digitalWrite(red, HIGH);
  // }

  // ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≠ LCD
  // delay(2000);
  // lcd.clear();
  // printLCD("I LOVE YOU ", 0, 0);
  // lcd.write(byte(0));
  // printLCDint(readTemperature(), 0, 1);
  // printLCD(" C", 6, 1);
  // lcd.write(byte(1));

  // Serial.println(tem);
  // web = tem;
}
